@using Microsoft.AspNetCore.Http
@using SlideInfo.App.Constants
@using SlideInfo.App.Helpers

@if (Context.Session.GetString(SessionConstants.ALERT) != null)
{
    @Html.Raw(Context.Session.GetString(SessionConstants.ALERT))
    Context.Session.Remove(SessionConstants.ALERT);
}

@{
    ViewData["Title"] = "Messages";
}
<h2>@ViewData["Title"]</h2>
<hr>

<div class="messenger">
    <div class="col-sm-3">
        <div class="row">
            <div id="custom-search-input">
                <div class="input-group col-md-12">
                    <input type="text" class="search-query form-control" placeholder="Search..." />
                    <button class="btn btn-danger" type="button">
                        <span class="glyphicon glyphicon-search"></span>
                    </button>
                </div>
            </div>

            <div class="member-list">
                <div class="member-link" id="personid">
                    <div class="media">
                        <div class="media-left">
                            <img src="https://lh6.googleusercontent.com/-y-MY2satK-E/AAAAAAAAAAI/AAAAAAAAAJU/ER_hFddBheQ/photo.jpg" alt="User Avatar" width="35" class="img-circle">
                        </div>
                        <div class="media-body a">
                            <h4>Jack Sparrow <small>unavailable</small> <span class="badge pull-right">3</span></h4>
                        </div>
                    </div>
                </div>

                <div class="member-link" id="personi1d">
                    <div class="media">
                        <div class="media-left">
                            <img src="https://lh6.googleusercontent.com/-y-MY2satK-E/AAAAAAAAAAI/AAAAAAAAAJU/ER_hFddBheQ/photo.jpg" alt="User Avatar" width="35" class="img-circle">
                        </div>
                        <div class="media-body a">
                            <h4>Jack Sparrow <small>unavailable</small> <span class="badge pull-right">3</span></h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--chat_sidebar-->
    <div class="col-sm-9 message_section">
        <div class="row">
            <div class="new_message_head">
                <div class="pull-left">
                    <button><i class="glyphicon glyphicon-plus" aria-hidden="true"></i> New Message</button>
                </div><div class="pull-right">
                    <div class="dropdown">
                        <button class="dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <i class="glyphicon glyphicon-cog" aria-hidden="true"></i> Settings
                            <span class="caret"></span>
                        </button>
                        <ul class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenu1">
                            <li><a href="#">Action</a></li>
                            <li><a href="#">Profile</a></li>
                            <li><a href="#">Logout</a></li>
                        </ul>
                    </div>
                </div>
            </div>

            <!--new_message_head-->
            <div class="chat-area">
                <div class="messages-inner" id="messages-inner">
                    <div class="messages-content" id="content"></div>
                </div>
            </div>

            <!--chat_area-->
            <div class="message-write">
                <textarea class="form-control message-input" id="message-input" placeholder="@ViewConstants.MESSAGE_TEXT_PLACEHOLDER"></textarea>
                <div class="clearfix"></div>
                <div class="chat-bottom">
                    <a href="#" class="btn btn-default pull-left" role="button">
                        <i class="glyphicon glyphicon-upload" aria-hidden="true"></i> @ViewConstants.MESSAGE_ADD_ATTACHMENT
                    </a>
                    <a href="#" id="send-message" class="pull-right btn btn-success green-button">
                        @ViewConstants.SEND_MESSAGE
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>
@section scripts {
    <!-- jQuery -->
    <script src="~/lib/jquery/dist/jquery.js"></script>
    <!-- SignalR -->
    <script src="~/js/jquery.signalr-2.2.2.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->

    <script>
        'use strict';

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        var Messenger = function () {
            function Messenger() {
                _classCallCheck(this, Messenger);

                this.messageList = [];
                this.deletedList = [];

                this.me = 1; // completely arbitrary id
                this.them = 5; // and another one

                this.onReceive = function (message) {
                    return console.log('Received: ' + message.text);
                };
                this.onSend = function (message) {
                    return console.log('Sent: ' + message.text);
                };
                this.onDelete = function (message) {
                    return console.log('Deleted: ' + message.text);
                };
            }

            Messenger.prototype.send = function send() {
                var text = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

                text = this.filter(text);

                if (this.validate(text)) {
                    var message = {
                        user: this.me,
                        text: text,
                        time: new Date().getTime()
                    };

                    this.messageList.push(message);

                    this.onSend(message);
                }
            };

            Messenger.prototype.receive = function receive() {
                var text = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

                text = this.filter(text);

                if (this.validate(text)) {
                    var message = {
                        user: this.them,
                        text: text,
                        time: new Date().getTime()
                    };

                    this.messageList.push(message);

                    this.onReceive(message);
                }
            };

            Messenger.prototype.delete = function _delete(index) {
                index = index || this.messageLength - 1;

                var deleted = this.messageLength.pop();

                this.deletedList.push(deleted);
                this.onDelete(deleted);
            };

            Messenger.prototype.filter = function filter(input) {
                var output = input.replace('bad input', 'good output'); // such amazing filter there right?
                return output;
            };

            Messenger.prototype.validate = function validate(input) {
                return !!input.length; // an amazing example of validation I swear.
            };

            return Messenger;
        }();

        var BuildHtml = function () {
            function BuildHtml() {
                _classCallCheck(this, BuildHtml);

                this.messageWrapper = 'message-wrapper';
                this.circleWrapper = 'circle-wrapper';
                this.textWrapper = 'text-wrapper';

                this.meClass = 'me';
                this.themClass = 'them';
            }

            BuildHtml.prototype._build = function build(text, who) {
                return '<div class="' +
                    this.messageWrapper +
                    ' ' +
                    this[who + 'Class'] +
                    '">\n              <div class="' +
                    this.circleWrapper +
                    ' animated bounceIn"></div>\n              <div class="' +
                    this.textWrapper +
                    '">...</div>\n            </div>';
            };

            BuildHtml.prototype.me = function me(text) {
                return this._build(text, 'me');
            };

            BuildHtml.prototype.them = function them(text) {
                return this._build(text, 'them');
            };

            return BuildHtml;
        }();

        $(function () {
            var chat = $.connection.messenger;
            // Start Hub
            $.connection.hub.start().done(function () {

                console.log("Testing after signal r start");

            });
            var messenger = new Messenger();
            var buildHtml = new BuildHtml();
            var currentUsername = prompt('Enter your name:', '');

            chat.client.addNewMessageToPage = function (name, message) {
                console.log("name test: ", name);
                console.log("message test: ", message);
                var messageObj = {
                    'text': message
                }
                if (currentUsername === name) {
                    buildSent(messageObj);
                } else {
                    buildReceived(messageObj);
                }
            };

            var $input = $('#message-input');
            var $send = $('#send-message');
            var $content = $('#content');
            var $inner = $('#messages-inner');


            function saveText(text) {
                $content.find('.message-wrapper').last().find('.text-wrapper').text(text);
            }

            function animateText() {
                setTimeout(function () {
                    $content.find('.message-wrapper').last().find('.text-wrapper').addClass('animated fadeIn');
                },
                    350);
            }

            function scrollBottom() {
                $($inner).animate({
                    scrollTop: $($content).offset().top + $($content).outerHeight(true)
                },
                    {
                        queue: false,
                        duration: 'ease'
                    });
            }

            function buildSent(message) {
                console.log('sending: ', message.text);

                $content.append(buildHtml.me(message.text));
                saveText(message.text);
                animateText();

                scrollBottom();
            }

            function buildReceived(message) {
                console.log('receiving: ', message.text);

                $content.append(buildHtml.them(message.text));
                saveText(message.text);
                animateText();

                scrollBottom();
            }

            function sendMessage() {
                var text = $input.val();
                // Call the Send method on the hub.
                chat.server.send(currentUsername, text);
                
                $input.val('');
                $input.focus();
            }

            messenger.onSend = buildSent;
            messenger.onReceive = buildReceived;
            /*
            setTimeout(function () {
                messenger.receive('Hello there!');
            },
                1500);

            setTimeout(function () {
                messenger.receive('Do you like this? If so check out more on my page...');
            },
                5000);

            setTimeout(function () {
                messenger.receive('Or maybe just give it a like!');
            },
                7500);
            */
            $input.focus();

            $send.on('click',
                function (e) {
                    sendMessage();
                });

            $input.on('keydown',
                function (e) {
                    var key = e.which || e.keyCode;

                    if (key === 13) {
                        // enter key
                        e.preventDefault();

                        sendMessage();
                    }
                });
        });
    </script>
}