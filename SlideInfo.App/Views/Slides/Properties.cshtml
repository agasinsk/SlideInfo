@using Microsoft.AspNetCore.Http
@using SlideInfo.App.Constants
@using SlideInfo.App.Helpers
@model SlideInfo.App.Models.SlideViewModels.PropertiesViewModel

@{
    ViewData["Title"] = "Properties | " + Model.Name;
}
@if (Context.Session.GetString(SessionConstants.Alert) != null)
{
    @Html.Raw(Context.Session.GetString(SessionConstants.Alert))
    Context.Session.Remove(SessionConstants.Alert);
}
<div class="container" id="properties">
    <h2>@Model.Name properties</h2>
    @if (Model.Properties != null)
    {
        <form asp-action="Properties" method="get">
            <div class="form-inline no-color">
                <p>
                    <input type="text" name="searchString" class="form-control" placeholder="Find property..." value="@ViewData[ViewDataConstants.CURRENT_FILTER]" />
                    <input type="submit" value="Search" class="btn btn-success green-button" />
                    @if (ViewData[ViewDataConstants.CURRENT_FILTER] != null)
                    {
                        <a asp-action="Properties" class="btn btn-default" role="button">Refresh</a>
                    }
                </p>
            </div>
        </form>
        <table class="table table-striped table-hover table-responsive">
            <thead>
                <tr>
                    <th class="col-xs-12 col-sm-6 col-md-3 col-lg-3">
                        <a asp-action="Properties" asp-route-sortOrder="@ViewData[ViewDataConstants.NAME_SORT_PARAM]">
                            Property
                            <i class="glyphicon @Html.IsSortedDesc(@ViewData[ViewDataConstants.NAME_SORT_PARAM])"></i>
                        </a>
                    </th>
                    <th>
                        Value
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Properties)
                {
                    <tr>
                        <th>@item.Key</th>
                        <td>@item.Value</td>
                    </tr>
                }
            </tbody>
        </table>

        var prevDisabled = !Model.Properties.HasPreviousPage ? "disabled" : "";
        var nextDisabled = !Model.Properties.HasNextPage ? "disabled" : "";


        <a asp-action="Properties"
           asp-route-sortOrder="@ViewData[ViewDataConstants.CURRENT_SORT]"
           asp-route-page="@(Model.Properties.PageIndex - 1)"
           asp-route-currentFilter="@ViewData[ViewDataConstants.CURRENT_FILTER]"
           class="btn btn-default @prevDisabled">
            Previous
        </a>
        <a asp-action="Properties"
           asp-route-sortOrder="@ViewData[ViewDataConstants.CURRENT_SORT]"
           asp-route-page="@(Model.Properties.PageIndex + 1)"
           asp-route-currentFilter="@ViewData[ViewDataConstants.CURRENT_FILTER]"
           class="btn btn-default @nextDisabled">
            Next
        </a>
    }

</div>